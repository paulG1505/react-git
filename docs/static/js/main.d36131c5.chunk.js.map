{"version":3,"sources":["components/CategoryAdd.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GitExpertApp.js","index.js"],"names":["CategoryAdd","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cat","type","value","onChange","target","GifGridItem","url","title","className","src","height","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","id","images","downsized_medium","GifGrid","setData","loading","setloading","useEffect","then","useFetchGifs","key","GitExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mNAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EACRC,mBAAS,IADD,mBACrCC,EADqC,KACzBC,EADyB,KAmB5C,OACI,0BAAMC,SAdS,SAACC,GAEhBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAO,IAGxBR,GAAc,SAAAS,GAAG,OAAGP,GAAH,mBAAiBO,OAClCN,EAAc,OAOd,2BACIO,KAAK,OACLC,MAAOT,EACPU,SAtBM,SAACP,GAEfF,EAAcE,EAAEQ,OAAOF,YCLlBG,EAAc,SAAC,GAAiB,IAAhBC,EAAe,EAAfA,IAAIC,EAAW,EAAXA,MAC7B,OACI,yBAAKC,UAAU,+CACX,yBACIC,IAAKH,EAAKI,OAAO,QACjBC,IAAKJ,IAET,6BACA,2BAAIA,K,uBCVHK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbR,EAFa,iDAEmCS,UAAUF,GAF7C,+DAGAG,MAAMV,GAHN,cAGbW,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAClB,MAAO,CACHC,GAAID,EAAIC,GACRhB,MAAOe,EAAIf,MACXD,IAAKgB,EAAIE,OAAOC,iBAAiBnB,QAVtB,kBAaZc,GAbY,4CAAH,sDCIPM,EAAU,SAAC,GAAkB,IAAhBb,EAAe,EAAfA,SAAe,ECDb,SAACA,GAAc,IAAD,EACdrB,mBAAS,IADK,mBAC/B2B,EAD+B,KACzBQ,EADyB,OAERnC,oBAAS,GAFD,mBAE/BoC,EAF+B,KAEtBC,EAFsB,KAQtC,OALAC,qBAAU,WACNlB,EAAQC,GACHkB,KAAKJ,GACVE,GAAW,KACZ,CAAChB,IACG,CAACe,UAAQT,QDLQa,CAAanB,GAA7Be,EAF6B,EAE7BA,QAAQT,EAFqB,EAErBA,KAChB,OACI,oCACI,wBAAIX,UAAU,yCAA0CK,GACvDe,EAAU,cAEP,yBAAKpB,UAAU,aAIPW,EAAKE,KAAI,SAACC,GAAD,OACL,kBAAC,EAAD,iBACQA,EADR,CAEIW,IAAKX,EAAIC,YEe1BW,EA7BM,WAAO,IAAD,EACa1C,mBAAS,CAAC,KADvB,mBAChB2C,EADgB,KACJ5C,EADI,KAQvB,OACI,6BACI,4CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BAEA,4BAIQ4C,EAAWd,KAAI,SAAAR,GAAQ,OACnB,kBAAC,EAAD,CACAoB,IAAKpB,EACLA,SAAUA,UCpBlCuB,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.d36131c5.chunk.js","sourcesContent":["import React,{useState} from 'react'\nimport PropTypes from 'prop-types'\n\nexport const CategoryAdd = ({setCategories}) => {\n    const [inputValue, setInputValue] = useState('')\n    const handleInput=(e)=>{\n        //en el target esta el valor\n        setInputValue(e.target.value);\n    }\n    const handleSubmit=(e)=>{\n        //prevenir el volver a cargar la pagina\n        e.preventDefault()\n        //para que no envie vacio\n        if(inputValue.trim().length>2){\n\n            //copia de lo que tiene el arreglo e incrementa primero\n            setCategories(cat=>[inputValue,...cat])\n            setInputValue('')\n        }\n\n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <input\n                type=\"text\"\n                value={inputValue}\n                onChange={handleInput}\n\n            />\n        </form>\n    )\n}\n//para que sea obigatorio el enviar\nCategoryAdd.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n","import React from 'react'\n\nexport const GifGridItem = ({url,title}) => {\n    return (\n        <div className=\"card animate__animated animate__backInRight\">\n            <img\n                src={url} height='100px'\n                alt={title}\n            />\n            <br/>\n            <p>{title}</p>\n        </div>\n    )\n}\n","export const getGifs = async (category) => {\n    //mandamos la categoria encode para los espacios\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=u4saSS0yFqdAIug5USjANiDNNBkXAFAs`\n    const resp = await fetch(url);\n    const { data } = await resp.json()\n    //mutamos el arreglo con solo los elementos que necesitamos\n    const gifs = data.map(img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images.downsized_medium.url\n        }\n    })\n    return gifs\n}","import React from 'react'\nimport { GifGridItem } from './GifGridItem'\nimport { useFetchGifs } from '../hooks/useFetchGifs';\n\nexport const GifGrid = ({ category }) => {\n    \n    const { loading,data} = useFetchGifs(category);\n    return (\n        <>\n            <h3 className=\"animate__animated animate__fadeInDown\" >{category}</h3>\n            {loading ? 'Cargando...' :\n\n                <div className=\"card-grid\">\n\n                    {/* al objeto lo descomponemos */}\n                    {\n                        data.map((img) => (\n                            <GifGridItem\n                                {...img}\n                                key={img.id}\n                            />\n                        ))\n                    }\n                </div>\n            }\n        </> \n    )\n}\n","import { useState,useEffect } from \"react\"\nimport { getGifs } from \"../helpers/getGifs\"\n\nexport const useFetchGifs = (category) => {\n    const [data, setData] = useState([])\n    const [loading, setloading] = useState(true)\n    useEffect(() => {\n        getGifs(category)\n            .then(setData)\n        setloading(false)\n    }, [category])//si la categoria cambia que vuelva a ejecuatar\n    return {loading,data};\n}\n","//rafc sinnipet\nimport React, { useState } from 'react'\nimport { CategoryAdd } from './components/CategoryAdd'\nimport { GifGrid } from './components/GifGrid'\n\nconst GitExpertApp = () => {\n    const [categories, setCategories] = useState([''])\n    // const handleAdd=()=>{\n    //     const n='asd'\n    //     //agregando elemento en un arreglo\n    //     setCategories([...categories,n])\n    // }\n\n    return (\n        <div>\n            <h2>GifExpertApp</h2>\n            <CategoryAdd setCategories={setCategories} />\n            <hr />\n\n            <ol>\n                {/* recorrer el arreglo con map  recibe obj y \n                lo ponemos como key*/}\n                {\n                    categories.map(category => (\n                        <GifGrid \n                        key={category}\n                        category={category} />\n                    ))\n                }\n            </ol>\n        </div>\n    )\n}\n\nexport default GitExpertApp\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GitExpertApp from './GitExpertApp';\n\n\nReactDOM.render(\n  <GitExpertApp/>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}